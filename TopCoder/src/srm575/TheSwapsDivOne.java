package srm575;

import java.util.*;
import static java.lang.Math.*;
import static java.lang.Integer.*;
import java.io.*;

public class TheSwapsDivOne {

	int INF = Integer.MAX_VALUE / 10;
	double DF = 0.0000000001;
	static PrintStream out = System.out;
	final int MOD = 1000000007;
	
	// TLE
	public double find(String[] S, int K){
		double ret = 0;
		String s = "";
		for(String t : S){
			s += t;
		}
		int N = s.length();
		int[] d = new int[N];
		for(int i = 0; i < s.length(); i++){
			d[i] = s.charAt(i) - '0';
		}

		double P = 1;
		
		for(int i = 0; i < K; i++){
			P = (double)(N-2) / N * P
				+ (1-P) / (N-1) / N * 2 ;  // (N-1)で割るのは、１個あたりが持っている確率
		}
		
		for(int i = 0; i < N; i++){
			for(int j = 0; j < N; j++){
				if(i == j){
					ret += P * d[i] * (N-j)*(j+1) / (N*(N+1)/2);
				}
				else{
					ret += (1-P) / (N-1) * d[i] * (N-j)*(j+1) / (N*(N+1)/2);
				}
			}
		}
		
		return ret;
	}
	

	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		TheSwapsDivOne t = new TheSwapsDivOne();
		String[] S = {"68187039961248098458610044521194341681532390154", "74791808997682320379379673720362635546472431789", "37736270441978263574152590390531009650133011882", "46048126895072547808811585565925742950429934183", "89017999057283422723226780970553938944309271344", "96619343703733392282161084770663204281840914261", "58204513193471619762763253709442456933258578079", "47830735285543259545420294913010340193759253534", "62227444201962300882803629956082986867815310993", "73269094999818600109958940368913414521152238690", "93456022521712185267319992359943406030460151499", "32881871279982881462250799945953494206583754922", "69203983665488937909533286584967346962623833785", "62458773527151010027362281778736708476756595244", "97022781511037130702821859525244810416850438269", "33431792289825847405682490143458424545537375598", "82813784851143525682521743792283156007639155371", "61482050506694424142940168046859372959388042698", "76676841902664348809017161877423602777246521931", "78287019354340091940034415272759230220108480338", "65227887686670373660591612666182928962479680645", "44058413852718016601116887237710170936115145080", "53240306592363920540253466445364458856610022743", "38083110566083823083464353802079048524910562928", "60633188050135345785701117654449338421205045845", "65600139600591641786006922669071322659569204476", "88033681174605538249201263007427176527200125755", "57011051554562218505512670654494270029356823976", "10826209080872111282773078068146208439477144493", "08256412856218625189296261031338170918711407282", "89857066988700902184257748811565504026870865589", "92409376910807246296794937668995047564984142128", "19578541898437325913743994073767651332488425401", "41702357466181031896604818611433905435505380566", "62123741030627370734881683882806515981473166972", "73715123786757972155983268834088009529816643897", "50966836328336405690584237685818005097150366874", "29948460050868569535891778283925773775271482717", "29797870660782264455654902696937163286585127738", "16381229990972562210333527220701999296282906209", "59574391328698856179656018447735661112502083204", "72957909400723775473421079277508641602259909905", "23167179476443817114504001848816331602373266126", "89596386722455168435961606212242361539610685293", "52112132370513240898860537659031097215318187296", "59345284084842985392623314965861017307429632997", "46339459609824043015176753914019181125587571452"};
		double ret = t.find(S, 537970);
		out.println(ret);
	}

}
