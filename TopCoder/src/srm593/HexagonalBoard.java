package srm593;
import java.util.*;
import static java.lang.Math.*;
import static java.lang.Integer.*;
import java.io.*;

public class HexagonalBoard {

	int INF = Integer.MAX_VALUE / 10;
	double DF = 0.0000000001;
	static PrintStream out = System.out;
	final int MOD = 1000000007;
	
	int N = 0;
	long b = 1;
	Map<Integer, Integer> map = null;
	Set<Integer> set = null;
	List<Integer> list = null;
	
	public int minColors(String[] bd){
		int ans = 0;
		N = bd.length;
		boolean[][] f = new boolean[N][N];
		for(int i = 0; i < bd.length; i++){
			String s = bd[i];
			for(int j = 0; j < s.length(); j++){
				if(s.charAt(j) == 'X'){
					f[i][j] = true;
				}
			}
		}
		int[][] dt = new int[N][N];
		for(int i = 0; i < bd.length; i++){
			
			for(int j = 0; j < N; j++){
				if(f[i][j] && dt[i][j] == 0){
					List<Integer> list = new ArrayList<Integer>();
					list.add(i*N + j);
					while(list.size() > 0){
						int next = list.remove(0);
						int y = next / N;
						int x = next % N;
						if(dt[y][x] > 0) continue;
						Set<Integer> set = new HashSet<Integer>();
						if(y > 0){
							set.add(dt[y-1][x]);
							if(dt[y-1][x] == 0 && f[y-1][x]){
								list.add(N*(y-1)+x);
							}
							if(x < N-1){
								set.add(dt[y-1][x+1]);
								if(dt[y-1][x+1] == 0 && f[y-1][x+1]){
									list.add(N*(y-1)+x+1);
								}
							}
						}
						if(x > 0){
							set.add(dt[y][x-1]);
							if(dt[y][x-1] == 0 && f[y][x-1]){
								list.add(N*(y)+x-1);
							}
						}
						if(x < N-1){
							set.add(dt[y][x+1]);
							if(dt[y][x+1] == 0 && f[y][x+1]){
								list.add(N*(y)+x+1);
							}
						}
						if(y < N-1){
							set.add(dt[y+1][x]);
							if(dt[y+1][x] == 0 && f[y+1][x]){
								list.add(N*(y+1)+x);
							}
							if(x > 0){
								set.add(dt[y+1][x-1]);
								if(dt[y+1][x-1] == 0 && f[y+1][x-1]){
									list.add(N*(y+1)+x-1);
								}
							}
						}
						for(int k = 1; ; k++){
							if(!set.contains(k)){
								dt[y][x] = k;
								break;
							}
						}
					}
				}
			}
		}

		for(int i = 0; i < N; i++){
			for(int j = 0 ; j < N; j++){
				ans = max(ans, dt[i][j]);
			}
		}
		for(int i = 0; i < N; i++){
			for(int j = 0; j < N; j++){
				out.print(dt[i][j]);
			}
			out.println();
		}
		if(ans > 3){
			ans = 3;
		}
		
		return ans;
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		HexagonalBoard t = new HexagonalBoard();
		String[] bd = {"------X----X-------------------------------X--X---", "XX-X----------X-------X-X--------XX--X---X-X------", "-------X-------X------------X-X-------------------", "-------------------X--------X-X-------------------", "---X---X-----X----X-------X--X----------XXX--X----", "-------X----X------X----X--------X---------X----X-", "--------------------X---X-----------------------X-", "X-X---X-----XX--------X-X---------X---------------", "------------------X-------------X-----------XX---X", "---------------X-----X------------X---------------", "---------------X------------------X-------X---XX--", "--XX------------------------X---------------X-----", "X--------X-----X-X-X-X--------------X--X-----X----", "--X-X--XXX-X-------------X-----------X---------X--", "-------X----X--------X---------XX-----XXX--X--XX--", "--X--------------------X---------------X----X--X--", "---------XX---------X-------X-----------X---X-----", "------X----X------X-X---------------------X-------", "---X--------------X---X------X-----------X--------", "-------------------X-XX-----------X-------X-------", "XX----X-----------------X-X-X-----X-X---XX---X----", "-----------X---------X-X----------------X-----X---", "--X-----X-------------------------------------X---", "-------------------X--X-X----X-----X-----XXX-----X", "X----------X------------X------X----X----XX---X---", "------XX--------------XX---------XX----X-X--------", "-------------------X---------X------X--X-----X----", "----X-----X--X-X----X----------X-X-X------X------X", "---------------------------X---------X--------XX--", "X---XX------X--------------X-------X---X---X-X-X--", "---------X---X-----XX-X----X---------------X------", "-X-------------X---------X--X---------X----------X", "----------------X----------X--------XX------------", "-------X----XX--X--X-------------XX----X--------X-", "--X--------X-------X--------X-----X----X----------", "--X-X---------------X----------X-----------------X", "-----X---X---X----XX-------------X----X-----------", "------X-----XX------X------------XX-----------XX--", "---X-X--------------------------------------X-----", "--------X---X-------X-------X---XX------------X---", "-X-X---------------X-X---X------------X--------X--", "X-----------X-----XXX-X---X----X----------------X-", "-X-X-------XX-------X---X----------X-------X------", "--X-------------------------X----X-X------XX--X--X", "--------------XX-------XX-X-X-----XX-X-------XX---", "-----------X-----------X----X-X-X----------------X", "--X----X---------X-------------------------------X", "X-----------------X----------------X-X-------X----", "--X---X--X---X-------XX-X---X-----------X---XX----", "----------X---X----XX------------------X----------"}
;
		int r = t.minColors(bd);
		out.println(r);
		/*
		 
		 roblem: 250
Test Case: 18
Succeeded: No
Execution Time: 13 ms
Args:
{{}}

Expected:
3

Received:
4

		 */
	}

}
